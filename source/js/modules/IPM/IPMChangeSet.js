// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'underscore', 'backbone', 'mustache', 'Helpers'], function($, _, Backbone, Mustache, Helpers) {
    var IPMChangeSet;
    return IPMChangeSet = (function() {

      function IPMChangeSet(POLICY, ACTION, USER) {
        this.POLICY = POLICY;
        this.ACTION = ACTION;
        this.USER = USER;
      }

      IPMChangeSet.prototype.getPolicyChangeSet = function(values) {
        var change_set_data, context, partials, xml;
        context = this.getPolicyContext(this.POLICY, this.USER, values);
        change_set_data = _.extend(context, values.formValues);
        partials = {
          body: this[_.underscored(this.ACTION)] || ''
        };
        xml = Mustache.render(this.policyChangeSetSkeleton, change_set_data, partials);
        return _.trim(xml.replace(/>(\s+)</g, '><'));
      };

      IPMChangeSet.prototype.getPolicyContext = function(policy, user, values) {
        var context, key, val, _ref;
        _ref = values.formValues;
        for (key in _ref) {
          val = _ref[key];
          if (val === '__deleteEmptyProperty') {
            delete values.formValues[key];
          }
          if (val === '__setEmptyValue') {
            values.formValues[key] = '';
          }
          if (key.indexOf('Doc') !== -1) {
            console.log(['Context > Doc?', values.formValues["" + key + "Url"]]);
          } else if (key.indexOf('Date') !== -1) {
            if (val !== "") {
              values.formValues[key] = Helpers.formatDate(val.replace('.000Z', 'Z'), 'YYYY-MM-DDTHH:mm:ss.sssZ');
            }
          }
        }
        context = {
          id: policy.get('insight_id'),
          user: user.get('email'),
          version: policy.getValueByPath('Management Version'),
          timestamp: values.formValues.timestamp || Helpers.makeTimestamp(),
          datestamp: Helpers.formatDate(new Date()),
          effectiveDate: values.formValues.effectiveDate || Helpers.makeTimestamp(),
          appliedDate: values.formValues.appliedDate || Helpers.makeTimestamp(),
          comment: values.formValues.comment || "posted by Policy Central IPM Module"
        };
        return context;
      };

      IPMChangeSet.prototype.commitChange = function(xml, success, error) {
        var defaults, payload_schema, post, xmldoc;
        xmldoc = $.parseXML(xml);
        payload_schema = "schema=" + (this.getPayloadType(xmldoc)) + "." + (this.getSchemaVersion(xmldoc));
        defaults = {
          url: this.POLICY.url(),
          type: 'POST',
          dataType: 'xml',
          contentType: "application/xml; " + payload_schema,
          data: xml,
          headers: {
            'Authorization': "Basic " + (this.POLICY.get('digest')),
            'X-Authorization': "Basic " + (this.POLICY.get('digest')),
            'Accept': 'application/vnd.ics360.insurancepolicy.2.6+xml',
            'X-Commit': true
          }
        };
        post = $.ajax(defaults);
        return $.when(post).then(success, error);
      };

      IPMChangeSet.prototype.getPayloadType = function(xml) {
        var node_name;
        node_name = $(xml).find('*').eq(0)[0].nodeName;
        return node_name.toLowerCase();
      };

      IPMChangeSet.prototype.getSchemaVersion = function(xml) {
        return $(xml).find('*').eq(0).attr('schemaVersion') || '';
      };

      IPMChangeSet.prototype.policyChangeSetSkeleton = "<PolicyChangeSet schemaVersion=\"3.1\">\n  <Initiation>\n    <Initiator type=\"user\">{{user}}</Initiator>\n  </Initiation>\n  <Target>\n    <Identifiers>\n      <Identifier name=\"InsightPolicyId\" value=\"{{id}}\" />\n    </Identifiers>\n    <SourceVersion>{{version}}</SourceVersion>\n  </Target>\n  <EffectiveDate>{{effectiveDate}}</EffectiveDate>\n  <AppliedDate>{{appliedDate}}</AppliedDate>\n  <Comment>{{comment}}</Comment>\n  {{>body}}\n</PolicyChangeSet>";

      IPMChangeSet.prototype.make_payment = "<Ledger>\n  <LineItem value=\"{{paymentAmount}}\" type=\"PAYMENT\" timestamp=\"{{timestamp}}\">\n    <Memo></Memo>\n    <DataItem name=\"Reference\" value=\"{{paymentReference}}\" />\n    <DataItem name=\"PaymentMethod\" value=\"{{paymentMethod}}\" />\n  </LineItem>\n</Ledger>\n<EventHistory>\n  <Event type=\"Payment\">\n    <DataItem name=\"PaymentAmount\" value=\"{{positivePaymentAmount}}\" />\n    <DataItem name=\"PaymentMethod\" value=\"{{paymentMethod}}\" />\n    <DataItem name=\"PaymentReference\" value=\"{{paymentReference}}\" />\n    <DataItem name=\"PaymentBatch\" value=\"{{paymentBatch}}\" />\n    <DataItem name=\"PostmarkDate\" value=\"{{postmarkDate}}\" />\n    <DataItem name=\"AppliedDate\" value=\"{{appliedDate}}\" />\n  </Event>\n</EventHistory>";

      return IPMChangeSet;

    })();
  });

}).call(this);

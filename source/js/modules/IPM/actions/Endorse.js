// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['modules/IPM/IPMActionView'], function(IPMActionView) {
    var EndorseAction;
    return EndorseAction = (function(_super) {

      __extends(EndorseAction, _super);

      function EndorseAction() {
        this.triggerCoverageCalculation = __bind(this.triggerCoverageCalculation, this);

        this.calculateCoverage = __bind(this.calculateCoverage, this);

        this.processView = __bind(this.processView, this);
        return EndorseAction.__super__.constructor.apply(this, arguments);
      }

      EndorseAction.prototype.COVERAGE_CALCULATIONS = {};

      EndorseAction.prototype.initialize = function() {
        return EndorseAction.__super__.initialize.apply(this, arguments);
      };

      EndorseAction.prototype.ready = function() {
        EndorseAction.__super__.ready.apply(this, arguments);
        return this.fetchTemplates(this.MODULE.POLICY, 'endorse', this.processView);
      };

      EndorseAction.prototype.processView = function(vocabTerms, view) {
        var viewData;
        EndorseAction.__super__.processView.call(this, vocabTerms, view);
        viewData = this.MODULE.POLICY.getTermDataItemValues(vocabTerms);
        viewData = this.MODULE.POLICY.getEnumerations(viewData, vocabTerms);
        viewData = _.extend(viewData, this.MODULE.POLICY.getPolicyOverview(), {
          policyOverview: true,
          policyId: this.MODULE.POLICY.get_pxServerIndex()
        });
        this.viewData = viewData;
        this.view = view;
        return this.trigger("loaded", this, this.postProcessView);
      };

      EndorseAction.prototype.render = function(viewData, view) {
        EndorseAction.__super__.render.apply(this, arguments);
        viewData = viewData || this.viewData;
        view = view || this.view;
        return this.$el.html(this.MODULE.VIEW.Mustache.render(view, viewData));
      };

      EndorseAction.prototype.submit = function(e) {
        EndorseAction.__super__.submit.call(this, e);
        this.VALUES.formValues.positivePaymentAmount = Math.abs(this.VALUES.formValues.paymentAmount || 0);
        this.VALUES.formValues.paymentAmount = -1 * this.VALUES.formValues.positivePaymentAmount;
        return this.CHANGE_SET.commitChange(this.CHANGE_SET.getPolicyChangeSet(this.VALUES), this.callbackSuccess, this.callbackError);
      EndorseAction.prototype.postProcessView = function() {
        var coverage_a, data,
          _this = this;
        EndorseAction.__super__.postProcessView.apply(this, arguments);
        this.$el.find('input').bind('coverage:calculate', this.calculateCoverage);
        this.$el.find('select[data-affects]').bind('change', this.triggerCoverageCalculation);
        this.$el.find('input[name=CoverageA]').bind('input', function(e) {
          _this.triggerAllCoverageCalculations();
          return _this.deriveCoverageACalculations();
        });
        coverage_a = this.$el.find('input[name=CoverageA]');
        if (coverage_a.length > 0) {
          if (data = coverage_a.data('calculations')) {
            return this.COVERAGE_CALCULATIONS = eval("(" + data + ")");
          }
        }
      };
      EndorseAction.prototype.calculateCoverage = function(e, val) {
        var coverage_a, new_value;
        coverage_a = parseInt(this.$el.find('input[name=CoverageA]').val(), 10);
        new_value = Math.round((coverage_a * val) / 10000);
        return $(e.currentTarget).val(new_value);
      };

      EndorseAction.prototype.triggerCoverageCalculation = function(e) {
        var el;
        el = $(e.currentTarget);
        return this.$el.find("input[name=" + (el.data('affects')) + "]").trigger('coverage:calculate', el.val());
      };

      EndorseAction.prototype.triggerAllCoverageCalculations = function() {
        var _this = this;
        return this.$el.find('select[data-affects]').each(function(index, el) {
          el = $(el);
          if (el.val()) {
            return _this.$el.find("input[name=" + (el.data('affects')) + "]").trigger('coverage:calculate', el.val());
          }
        });
      };

      EndorseAction.prototype.deriveCoverageACalculations = function() {
        var calc_val, coverage_a, key, val, value_a, _ref, _results;
        if (!_.isEmpty(this.COVERAGE_CALCULATIONS)) {
          coverage_a = this.$el.find('input[name=CoverageA]');
          if (coverage_a.length > 0 || (coverage_a.val() != null)) {
            value_a = coverage_a.val();
            _ref = this.COVERAGE_CALCULATIONS;
            _results = [];
            for (key in _ref) {
              val = _ref[key];
              calc_val = value_a * parseFloat(val);
              _results.push(this.$el.find("input[name=" + key + "]").val(calc_val));
            }
            return _results;
          }
        }
      };

      return EndorseAction;

    })(IPMActionView);
  });

}).call(this);

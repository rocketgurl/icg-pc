// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['modules/IPM/IPMActionView'], function(IPMActionView) {
    var EndorseAction;
    return EndorseAction = (function(_super) {

      __extends(EndorseAction, _super);

      function EndorseAction() {
        this.triggerCoverageCalculation = __bind(this.triggerCoverageCalculation, this);

        this.calculateCoverage = __bind(this.calculateCoverage, this);

        this.processPreview = __bind(this.processPreview, this);

        this.processView = __bind(this.processView, this);

        this.processViewData = __bind(this.processViewData, this);
        return EndorseAction.__super__.constructor.apply(this, arguments);
      }

      EndorseAction.prototype.coverage_calculations = {};

      EndorseAction.prototype.transaction_request_xml = null;

      EndorseAction.prototype.override_validation_state = false;

      EndorseAction.prototype.initialize = function() {
        return EndorseAction.__super__.initialize.apply(this, arguments);
      };

      EndorseAction.prototype.ready = function() {
        EndorseAction.__super__.ready.apply(this, arguments);
        return this.fetchTemplates(this.MODULE.POLICY, 'endorse', this.processView);
      };

      EndorseAction.prototype.processViewData = function(vocabTerms, view) {
        var viewData;
        EndorseAction.__super__.processViewData.call(this, vocabTerms, view);
        viewData = this.MODULE.POLICY.getTermDataItemValues(vocabTerms);
        viewData = this.MODULE.POLICY.getEnumerations(viewData, vocabTerms);
        viewData = _.extend(viewData, this.MODULE.POLICY.getPolicyOverview(), {
          policyOverview: true,
          policyId: this.MODULE.POLICY.get_pxServerIndex()
        });
        this.viewData = viewData;
        this.view = view;
        return [viewData, view];
      };

      EndorseAction.prototype.processView = function(vocabTerms, view) {
        this.processViewData(vocabTerms, view);
        return this.trigger("loaded", this, this.postProcessView);
      };

      EndorseAction.prototype.processPreview = function(vocabTerms, view) {
        this.processViewData(vocabTerms, view);
        this.viewData.preview = this.parseIntervals(this.VALUES);
        this.viewData.current_policy = this.current_policy_intervals;
        return this.trigger("loaded", this, this.postProcessPreview);
      };

      EndorseAction.prototype.render = function(viewData, view) {
        EndorseAction.__super__.render.apply(this, arguments);
        viewData = viewData || this.viewData;
        view = view || this.view;
        this.$el.html(this.MODULE.VIEW.Mustache.render(view, viewData));
        return console.log(['ActionView : render', viewData]);
      };

      EndorseAction.prototype.submit = function(e) {
        var callback, callbackFunc, options, override_validation_state;
        EndorseAction.__super__.submit.call(this, e);
        console.log(['Submit', this.VALUES]);
        this.VALUES.formValues.transactionType = 'Endorsement';
        this.current_policy_intervals = this.parseIntervals(this.VALUES);
        if (this.VALUES.formValues.comment === '') {
          this.VALUES.formValues.comment = '__deleteEmptyProperty';
        }
        options = {};
        callback = this.callbackSuccess;
        if (_.has(this.VALUES.formValues, 'preview')) {
          callbackFunc = this.callbackPreview;
          options.headers = {
            'X-Commit': false
          };
        }
        if ((this.VALUES.formValues.id_rv_override != null) && this.VALUES.formValues.id_rv_override === '1') {
          options.headers = _.extend(options.headers, {
            'Override-Validation-Block': true
          });
          override_validation_state = true;
        }
        if (!(this.transaction_request_xml != null)) {
          this.transaction_request_xml = this.ChangeSet.getTransactionRequest(this.VALUES, this.viewData);
        }
        return this.ChangeSet.commitChange(this.transaction_request_xml, callbackFunc, this.callbackError, options);
      };

      EndorseAction.prototype.postProcessView = function() {
        var coverage_a, data,
          _this = this;
        EndorseAction.__super__.postProcessView.apply(this, arguments);
        this.$el.find('input').bind('coverage:calculate', this.calculateCoverage);
        this.$el.find('select[data-affects]').bind('change', this.triggerCoverageCalculation);
        this.$el.find('input[name=CoverageA]').bind('input', function(e) {
          _this.triggerAllCoverageCalculations();
          return _this.deriveCoverageACalculations();
        });
        coverage_a = this.$el.find('input[name=CoverageA]');
        if (coverage_a.length > 0) {
          if (data = coverage_a.data('calculations')) {
            return this.coverage_calculations = eval("(" + data + ")");
          }
        }
      };

      EndorseAction.prototype.parseIntervals = function(values) {
        var adjustments, data_items, endDate, field, form, interval, interval_field_names, interval_fields, interval_o, intervals, msInDay, parsed, policy, startDate, term, termEnd, termStart, term_fields, value, _i, _len, _ref, _ref1;
        form = values.formValues;
        policy = this.MODULE.POLICY;
        term = policy.getLastTerm();
        intervals = term.Intervals && term.Intervals.Interval;
        console.log(['POLICY', this.MODULE.POLICY]);
        console.log(['parseIntervals : term', term]);
        console.log(['parseIntervals : intervals', term.Intervals]);
        if (!_.isArray(intervals)) {
          intervals = [intervals];
        }
        msInDay = 24 * 60 * 60 * 1000;
        termStart = Date.parse(term.EffectiveDate);
        termEnd = Date.parse(term.ExpirationDate);
        parsed = {
          intervals: [],
          term: {
            startDate: termStart,
            endDate: termEnd,
            fmtStartDate: this.Helpers.stripTimeFromDate(term.EffectiveDate, 'MMM D YY'),
            fmtEndDate: this.Helpers.stripTimeFromDate(term.ExpirationDate, 'MMM D YY'),
            days: Math.round((termEnd - termStart) / msInDay)
          }
        };
        term_fields = {
          grandSubtotalNonCatUnadjusted: 'GrandSubtotalNonCatUnadjusted',
          grandSubtotalCatUnadjusted: 'GrandSubtotalCatUnadjusted',
          grandSubtotalNonCat: 'GrandSubtotalNonCat',
          grandSubtotalCat: 'GrandSubtotalCat',
          grandSubtotalUnadjusted: 'GrandSubtotalUnadjusted',
          grandSubtotal: 'GrandSubtotal',
          termGrandSubtotalAdjustment: 'TermGrandSubtotalAdjustment',
          fees: 'TotalFees',
          grandTotal: 'TotalPremium'
        };
        parsed.term = _.extend(parsed.term, this.roundTermFields(term.DataItem, term_fields));
        interval_field_names = ['grandSubtotalNonCat', 'grandSubtotalCat', 'grandSubtotalUnadjusted', 'grandSubtotal', 'fees', 'grandTotal'];
        interval_fields = _.omit(term_fields, _.difference(_.keys(term_fields), interval_field_names));
        adjustments = {
          nonCatAdjustment: (_ref = form.NonHurricanePremiumDollarAdjustmentFRC) != null ? _ref : 0,
          catAdjustment: (_ref1 = form.HurricanePremiumDollarAdjustmentFRC) != null ? _ref1 : 0
        };
        for (_i = 0, _len = intervals.length; _i < _len; _i++) {
          interval = intervals[_i];
          startDate = Date.parse(interval.StartDate);
          endDate = Date.parse(interval.EndDate);
          interval_o = {
            startDate: startDate,
            endDate: endDate,
            fmtStartDate: this.Helpers.stripTimeFromDate(interval.StartDate, 'MMM D YY'),
            fmtEndDate: this.Helpers.stripTimeFromDate(interval.EndDate, 'MMM D YY'),
            days: Math.round((endDate - startDate) / msInDay)
          };
          data_items = this.processIntervalFields(interval.DataItem, interval_fields, adjustments);
          parsed.intervals.push(_.extend(interval_o, data_items));
        }
        parsed.intervals = _.sortBy(parsed.intervals, 'startDate');
        parsed.intervals[parsed.intervals.length - 1].isNew = true;
        if (!_.has(parsed.term, 'grandSubTotal')) {
          interval = parsed.intervals[parsed.intervals.length - 1];
          for (field in interval) {
            value = interval[field];
            if (!_.has(parsed, field)) {
              parsed[field] = value;
            }
          }
        }
        return parsed;
      };

      EndorseAction.prototype.processIntervalFields = function(terms, fields, adj) {
        var processed;
        fields = this.roundTermFields(terms, fields);
        processed = {
          grandSubtotalNonCatUnadjusted: Math.round(parseInt(fields.grandSubtotalNonCat, 10) - ~~adj.nonCatAdjustment),
          grandSubtotalCatUnadjusted: Math.round(parseInt(fields.grandSubtotalCat, 10) - ~~adj.catAdjustment)
        };
        return _.extend(fields, processed, adj);
      };

      EndorseAction.prototype.roundTermFields = function(terms, term_fields) {
        var field, key, out;
        out = {};
        for (key in term_fields) {
          field = term_fields[key];
          out[key] = Math.round(this.MODULE.POLICY.getDataItem(terms, field));
        }
        return out;
      };

      EndorseAction.prototype.calculateCoverage = function(e, val) {
        var coverage_a, new_value;
        coverage_a = parseInt(this.$el.find('input[name=CoverageA]').val(), 10);
        new_value = Math.round((coverage_a * val) / 10000);
        return $(e.currentTarget).val(new_value);
      };

      EndorseAction.prototype.triggerCoverageCalculation = function(e) {
        var el;
        el = $(e.currentTarget);
        return this.$el.find("input[name=" + (el.data('affects')) + "]").trigger('coverage:calculate', el.val());
      };

      EndorseAction.prototype.triggerAllCoverageCalculations = function() {
        var _this = this;
        return this.$el.find('select[data-affects]').each(function(index, el) {
          el = $(el);
          if (el.val()) {
            return _this.$el.find("input[name=" + (el.data('affects')) + "]").trigger('coverage:calculate', el.val());
          }
        });
      };

      EndorseAction.prototype.deriveCoverageACalculations = function() {
        var calc_val, coverage_a, key, val, value_a, _ref, _results;
        if (!_.isEmpty(this.coverage_calculations)) {
          coverage_a = this.$el.find('input[name=CoverageA]');
          if (coverage_a.length > 0 || (coverage_a.val() != null)) {
            value_a = coverage_a.val();
            _ref = this.coverage_calculations;
            _results = [];
            for (key in _ref) {
              val = _ref[key];
              calc_val = value_a * parseFloat(val);
              _results.push(this.$el.find("input[name=" + key + "]").val(calc_val));
            }
            return _results;
          }
        }
      };

      EndorseAction.prototype.preview = function() {};

      return EndorseAction;

    })(IPMActionView);
  });

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['modules/IPM/IPMActionView', 'modules/IPM/actions/Endorse'], function(IPMActionView, Endorse) {
    var CancelReinstateAction;
    return CancelReinstateAction = (function(_super) {

      __extends(CancelReinstateAction, _super);

      function CancelReinstateAction() {
        this.processPreview = __bind(this.processPreview, this);

        this.processSubView = __bind(this.processSubView, this);

        this.processView = __bind(this.processView, this);
        return CancelReinstateAction.__super__.constructor.apply(this, arguments);
      }

      CancelReinstateAction.prototype.initialize = function() {
        CancelReinstateAction.__super__.initialize.apply(this, arguments);
        this.Endorse = new Endorse({
          PARENT_VIEW: this.PARENT_VIEW,
          MODULE: this.MODULE
        });
        this.events = {
          "click .ipm-action-links li a": "loadSubAction"
        };
        return this.TRANSACTION_TYPES = {
          'cancel': {
            label: 'Cancellation',
            title: 'The policy has been cancelled',
            submit: 'Cancel this policy immediately',
            validators: {
              'effectiveDate': this.Helpers.dateRange
            }
          },
          'cancel_pending': {
            label: 'PendingCancellation',
            title: 'The policy has been set to pending cancel',
            submit: 'Set to pending cancel',
            validators: {
              'effectiveDate': this.Helpers.dateRange
            }
          },
          'reinstate': {
            label: 'Reinstatement',
            title: 'The policy has been reinstated',
            submit: 'Reinstate this policy'
          },
          'rescind': {
            label: 'PendingCancellationRescission',
            title: 'The policy pending cancellation has been rescinded',
            submit: 'Rescind pending cancellation'
          }
        };
      };

      CancelReinstateAction.prototype.ready = function() {
        CancelReinstateAction.__super__.ready.apply(this, arguments);
        return this.fetchTemplates(this.MODULE.POLICY, 'cancellation', this.processView);
      };

      CancelReinstateAction.prototype.processView = function(vocabTerms, view) {
        var viewData, _ref;
        this.CURRENT_SUBVIEW = false;
        _ref = this.processViewData(vocabTerms, view), viewData = _ref[0], view = _ref[1];
        this.processCancellationData(viewData);
        return this.trigger("loaded", this, this.postProcessView);
      };

      CancelReinstateAction.prototype.processSubView = function(vocabTerms, view) {
        var viewData, _ref;
        _ref = this.processViewData(vocabTerms, view, true), viewData = _ref[0], view = _ref[1];
        return this.trigger("loaded", this, this.postProcessSubView);
      };

      CancelReinstateAction.prototype.postProcessSubView = function() {
        var cancel,
          _this = this;
        this.postProcessView();
        cancel = this.$el.find('.form_actions a');
        cancel.off('click');
        return cancel.on('click', function(e) {
          e.preventDefault();
          $(_this).off('click');
          return _this.processView(_this.TPL_CACHE['CancelReinstate'].model, _this.TPL_CACHE['CancelReinstate'].view);
        });
      };

      CancelReinstateAction.prototype.processPreview = function(vocabTerms, view) {
        var preview_effective_date, preview_labels, preview_values, _ref;
        this.processViewData(vocabTerms, view, true);
        this.viewData.preview = this.Endorse.parseIntervals(this.VALUES);
        this.viewData.current_policy = this.current_policy_intervals;
        preview_values = this.extractEventValues(this.MODULE.POLICY, this.viewData);
        preview_labels = this.determinePreviewLabel(this.VALUES.formValues, this.viewData);
        preview_effective_date = this.determineCorrectPreviewDate(this.MODULE.POLICY, this.viewData);
        this.viewData = _.extend(this.viewData, preview_values, preview_labels, preview_effective_date);
        this.viewData = _.extend(this.viewData, this.calculateAdvanceNoticeDays(this.viewData));
        this.viewData.preview.submitLabel = (_ref = this.TRANSACTION_TYPES[this.CURRENT_SUBVIEW].submit) != null ? _ref : '';
        this.viewData.preview.RateType = this.viewData.preview.ReasonCode === "15" ? "Short-Rate" : "Pro Rata";
        return this.trigger("loaded", this, this.postProcessSubView);
      };

      CancelReinstateAction.prototype.processCancellationData = function(viewData) {
        var cancel_data, policy;
        policy = this.MODULE.POLICY;
        cancel_data = {
          policyState: policy.getState(),
          policyStateVal: null,
          pendingCancel: policy.isPendingCancel(),
          pendingCancelReasonCode: null,
          pendingCancelReasonCodeLabel: null,
          policyEffectiveDate: policy.getEffectiveDate(),
          policyExpirationDate: policy.getExpirationDate(),
          cancellationEffectiveDate: null
        };
        if (_.isObject(cancel_data.policyState)) {
          cancel_data.policyStateVal = cancel_data.policyState.text;
        } else {
          cancel_data.policyStateVal = cancel_data.policyState;
        }
        if (cancel_data.pendingCancel && _.isObject(cancel_data.pendingCancel)) {
          cancel_data = this.processPendingCancellation(cancel_data, viewData);
        }
        cancel_data = (function() {
          switch (cancel_data.policyStateVal) {
            case 'ACTIVEPOLICY':
              return this.processActivePolicy(cancel_data);
            case 'CANCELLEDPOLICY':
              return this.processCancelledPolicy(cancel_data, viewData);
            default:
              return cancel_data;
          }
        }).call(this);
        return this.viewData = _.extend(viewData, cancel_data);
      };

      CancelReinstateAction.prototype.processPendingCancellation = function(cancel_data, viewData) {
        var reasonLabel;
        reasonLabel = _.where(viewData.EnumsReasonCodesAndLabels, {
          value: cancel_data.pendingCancel.reasonCode
        });
        if (_.isArray(reasonLabel)) {
          reasonLabel = reasonLabel[0]['label'];
        }
        cancel_data.pendingCancelReasonCode = cancel_data.pendingCancel.reasonCode;
        cancel_data.pendingCancelReasonCodeLabel = reasonLabel;
        cancel_data.cancellationEffectiveDate = this.Helpers.stripTimeFromDate(cancel_data.pendingCancel.cancellationEffectiveDate);
        cancel_data.pendingCancel = true;
        return cancel_data;
      };

      CancelReinstateAction.prototype.processActivePolicy = function(cancel_data) {
        var active_data;
        if (cancel_data.pendingCancel) {
          active_data = {
            cancelDisabled: '',
            reinstateDisabled: 'disabled',
            pendingDisabled: 'disabled',
            rescindDisabled: '',
            msg: true,
            msgType: 'notice',
            msgHeading: 'This is an active policy that is pending cancellation.',
            msgText: "Cancellation is effective <b>" + cancel_data.cancellationEffectiveDate + "</b> due to <b>" + cancel_data.pendingCancelReasonCodeLabel + "</b>"
          };
        } else {
          active_data = {
            cancelDisabled: '',
            pendingDisabled: '',
            reinstateDisabled: 'disabled',
            rescindDisabled: 'disabled',
            pendingCancelReasonCode: null,
            cancellationEffectiveDate: null,
            msg: false,
            msgType: null,
            msgHeading: null,
            msgText: null
          };
        }
        return _.extend(cancel_data, active_data);
      };

      CancelReinstateAction.prototype.processCancelledPolicy = function(cancel_data, viewData) {
        var active_data, effectiveDate, reasonLabel;
        reasonLabel = _.where(viewData.EnumsReasonCodesAndLabels, {
          value: cancel_data.policyState.reasonCode
        });
        if (_.isArray(reasonLabel)) {
          reasonLabel = reasonLabel[0]['label'];
        }
        effectiveDate = 'not avaialabe';
        if (_.has(cancel_data.policyState, 'effectiveDate')) {
          effectiveDate = this.Helpers.stripTimeFromDate(cancel_data.policyState.effectiveDate);
        }
        active_data = {
          cancelDisabled: 'disabled',
          pendingDisdabled: 'disabled',
          rescindDisabled: 'disabled',
          reinstateDisabled: '',
          msg: true,
          msgType: 'notice',
          msgHeading: 'This is a cancelled policy',
          msgText: "Cancellation took effect <b>" + effectiveDate + "</b> due to <b>" + reasonLabel + "</b>"
        };
        return _.extend(cancel_data, active_data);
      };

      CancelReinstateAction.prototype.loadSubAction = function(e) {
        var action, msg, _ref;
        e.preventDefault();
        if (e.currentTarget.className !== 'disabled') {
          action = (_ref = $(e.currentTarget).attr('href')) != null ? _ref : false;
          if (action != null) {
            this.CURRENT_SUBVIEW = action;
            return this.fetchTemplates(this.MODULE.POLICY, action, this.processSubView);
          } else {
            msg = "Could not load that action. Contact support.";
            return this.PARENT_VIEW.displayMessage('error', msg, 12000);
          }
        }
      };

      CancelReinstateAction.prototype.submit = function(e) {
        var callbackFunc, msg, options, transaction_types, _ref;
        CancelReinstateAction.__super__.submit.call(this, e);
        if (this.VALUES.formValues.comment === '') {
          this.VALUES.formValues.comment = '__deleteEmptyProperty';
        }
        transaction_types = {
          'cancel': 'Cancellation',
          'cancel_pending': 'PendingCancellation',
          'reinstate': 'Reinstatement',
          'rescind': 'PendingCancellationRescission'
        };
        this.VALUES.formValues.transactionType = (_ref = this.TRANSACTION_TYPES[this.CURRENT_SUBVIEW].label) != null ? _ref : false;
        if (!this.VALUES.formValues.transactionType) {
          msg = "There was an error determining which Transaction Type this request is.";
          this.PARENT_VIEW.displayMessage('error', msg, 12000);
          return false;
        }
        this.current_policy_intervals = this.Endorse.parseIntervals(this.VALUES);
        if (_.has(this.VALUES.formValues, 'effectiveDate')) {
          this.VALUES.formValues.effectiveDate = this.Helpers.stripTimeFromDate(this.VALUES.formValues.effectiveDate);
        }
        callbackFunc = this.callbackSuccess;
        options = {};
        if (_.has(this.VALUES.formValues, 'preview')) {
          if (this.VALUES.formValues.preview !== 'confirm') {
            callbackFunc = this.callbackPreview;
            options.headers = {
              'X-Commit': false
            };
          }
        }
        return this.ChangeSet.commitChange(this.ChangeSet.getTransactionRequest(this.VALUES, this.viewData), callbackFunc, this.callbackError, options);
      };

      CancelReinstateAction.prototype.extractEventValues = function(policy, viewData) {
        var cancellation, data, data_money, data_whitelist, events, _i, _len, _ref;
        events = policy.get('json').EventHistory.Event.reverse();
        cancellation = _.find(events, function(event) {
          return event.type === 'Cancel' || event.type === 'PendingCancellation';
        });
        viewData.preview.Action = cancellation.type === "Cancel" ? "Cancellation" : "Pending Cancellation";
        data_whitelist = ['AppliedDate', 'reasonCode', 'reasonCodeLabel', 'EffectiveDate', 'ChangeInPremium', 'ChangeInTax', 'CancelAmount', 'ChangeInFee'];
        data_money = ['ChangeInPremium', 'ChangeInTax', 'CancelAmount', 'ChangeInFee'];
        _ref = cancellation.DataItem;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          if (_.contains(data_whitelist, data.name)) {
            if (_.contains(data_money, data.name)) {
              viewData.preview[_.classify(data.name)] = "$" + (this.Helpers.formatMoney(data.value));
            } else {
              viewData.preview[_.classify(data.name)] = data.value;
            }
          }
        }
        return viewData;
      };

      CancelReinstateAction.prototype.determinePreviewLabel = function(formValues, viewData) {
        var preview_labels;
        preview_labels = {
          "PendingCancellationRescission": "rescission of pending cancellation",
          "Reinstatement": "reinstatement",
          "PendingCancellation": "pending cancellation",
          "Cancellation": "cancellation"
        };
        viewData.preview.PreviewLabel = preview_labels[formValues.transactionType];
        if (formValues.transactionType === "PendingCancellation" || formValues.transactionType === "Resinstatement") {
          viewData.preview.Undo = true;
        }
        return viewData;
      };

      CancelReinstateAction.prototype.determineCorrectPreviewDate = function(policy, viewData) {
        var management;
        management = policy.get('json').Management;
        if (this.VALUES.formValues.transactionType === "PendingCancellation") {
          viewData.preview.EffectiveDate = management.PendingCancellation.cancellationEffectiveDate;
        } else if (_.has(management, 'policyState') && _.has(management.policyState, 'effectiveDate')) {
          viewData.preview.EffectiveDate = management.policyState.effectiveDate;
        }
        return viewData;
      };

      CancelReinstateAction.prototype.calculateAdvanceNoticeDays = function(viewData) {
        var MILLISECONDS_PER_DAY;
        MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;
        viewData.preview.AdvanceNoticeDays = (Date.parse(viewData.preview.EffectiveDate) - Date.parse(viewData.preview.AppliedDate)) / MILLISECONDS_PER_DAY;
        if (viewData.preview.AdvanceNoticeDays < 0) {
          viewData.preview.AdvanceNoticeDays = 0;
        }
        return viewData;
      };

      return CancelReinstateAction;

    })(IPMActionView);
  });

}).call(this);

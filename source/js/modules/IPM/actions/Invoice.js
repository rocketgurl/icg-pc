// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['modules/IPM/IPMActionView'], function(IPMActionView) {
    var InvoiceAction;
    return InvoiceAction = (function(_super) {

      __extends(InvoiceAction, _super);

      function InvoiceAction() {
        this.processView = __bind(this.processView, this);
        return InvoiceAction.__super__.constructor.apply(this, arguments);
      }

      InvoiceAction.prototype.initialize = function() {
        return InvoiceAction.__super__.initialize.apply(this, arguments);
      };

      InvoiceAction.prototype.ready = function() {
        InvoiceAction.__super__.ready.apply(this, arguments);
        return this.fetchTemplates(this.MODULE.POLICY, 'invoice', this.processView);
      };

      InvoiceAction.prototype.processView = function(vocabTerms, view) {
        this.processViewData(vocabTerms, view);
        return this.trigger("loaded", this, this.postProcessView);
      };

      InvoiceAction.prototype.submit = function(e) {
        var formValues, id_stamp, label_stamp, timestamp;
        InvoiceAction.__super__.submit.call(this, e);
        timestamp = this.Helpers.makeTimestamp();
        label_stamp = this.Helpers.formatDate(new Date(), 'ddd MMM DD YYYY HH:mm:ss Z');
        id_stamp = timestamp.replace(/:|\.\d{3}/g, '');
        formValues = {
          changeType: 'INVOICE',
          reasonCode: 'INVOICE',
          InvoiceDateCurrent: timestamp,
          documentType: 'Invoice',
          documentLabel: "Invoice " + label_stamp,
          documentHref: '',
          documentId: "Invoice-" + id_stamp
        };
        if (_.has(this.VALUES.formValues, 'InvoiceAmountCurrent')) {
          formValues.InvoiceAmountCurrent = this.Helpers.formatMoney(this.VALUES.formValues.InvoiceAmountCurrent);
        }
        if (_.has(this.VALUES.formValues, 'installmentCharge') && this.Helpers.isInt(this.VALUES.formValues.installmentCharge)) {
          formValues.installmentCharge = this.Helpers.formatMoney(this.VALUES.formValues.installmentCharge);
        }
        this.VALUES.formValues = _.extend(this.VALUES.formValues, formValues);
        return this.ChangeSet.commitChange(this.ChangeSet.getPolicyChangeSet(this.VALUES), this.callbackSuccess, this.callbackError);
      };

      return InvoiceAction;

    })(IPMActionView);
  });

}).call(this);

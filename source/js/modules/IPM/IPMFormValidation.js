// Generated by CoffeeScript 1.4.0
(function() {

  define(['jquery', 'underscore', 'mustache', 'Helpers', 'moment', 'momentrange'], function($, _, Mustache, Helpers, moment) {
    var IPMFormValidation;
    return IPMFormValidation = (function() {

      IPMFormValidation.prototype.validators = {};

      function IPMFormValidation() {
        var _this = this;
        this.validateField = _.wrap(this.validateField, function(func) {
          var args, result;
          args = _.toArray(arguments);
          result = func(args[1], args[2], args[3]);
          if (result) {
            _this.showErrorState(args[1]);
          } else {
            _this.removeErrorState(args);
          }
          return result;
        });
        _.each(['showErrorState', 'removeErrorState'], function(f) {
          return _this[f] = _.wrap(_this[f], function(func) {
            var args;
            args = _.toArray(arguments);
            if (!(args[1] instanceof jQuery)) {
              args[1] = $(args[1]);
            }
            return func(args[1], _this);
          });
        });
      }

      IPMFormValidation.prototype.validateFields = function(required_fields) {
        var el, field, fields, _i, _len, _results;
        fields = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = required_fields.length; _i < _len; _i++) {
            el = required_fields[_i];
            _results.push(this.validateField(el, this.validators, this));
          }
          return _results;
        }).call(this);
        _results = [];
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
          field = fields[_i];
          if (field) {
            _results.push(field);
          }
        }
        return _results;
      };

      IPMFormValidation.prototype.validateField = function(el, validators, FormValidation) {
        var el_name;
        if (!(el instanceof jQuery)) {
          el = $(el);
        }
        if (el.val() === '' || el.val() === void 0) {
          return {
            element: el,
            msg: 'This is a required field'
          };
        }
        el_name = el.attr('name');
        if ((validators != null) && _.has(validators, el_name)) {
          return FormValidation[validators[el_name]](el);
        } else {
          return false;
        }
      };

      IPMFormValidation.prototype.showErrorState = function(el, scope) {
        var _this = this;
        scope = scope != null ? scope : this;
        el.addClass('validation_error').on('change', function(el) {
          return scope.validateField($(el.currentTarget));
        }).parent().find('label').addClass('validation_error');
        return el;
      };

      IPMFormValidation.prototype.removeErrorState = function(el) {
        if (el.hasClass('validation_error')) {
          el.removeClass('validation_error').parent().find('label').removeClass('validation_error');
        }
        return el;
      };

      IPMFormValidation.prototype.displayErrorMsg = function(errors) {
        var details;
        details = _.map(errors, function(err) {
          var $label;
          $label = $(err.element).parent().find('label');
          $label.find('i').remove();
          return "<li>" + ($label.html()) + " - " + err.msg + "</li>";
        });
        return "The fields below had errors that need correction:\n<div class=\"error_details\">\n  <ul>\n    " + (details.join('')) + "\n  </ul>\n</div>";
      };

      IPMFormValidation.prototype.dateRange = function(el) {
        var end, range, start, whence;
        if (el.val() === '' || !(el.val() != null)) {
          ({
            element: el,
            msg: "Date missing"
          });
        }
        start = moment(el.data('minDate')).subtract('days', 1);
        end = moment(el.data('maxDate')).add('days', 1);
        whence = moment(el.val());
        range = moment().range(start, end);
        if (whence.within(range)) {
          return false;
        } else {
          return {
            element: el,
            msg: "Outside date range: " + (el.data('minDate')) + " - " + (el.data('maxDate'))
          };
        }
      };

      IPMFormValidation.prototype.money = function(el) {
        if (parseFloat(el.val(), 10) > 0) {
          return true;
        } else {
          return {
            element: el,
            msg: "Needs to be greater than zero"
          };
        }
      };

      IPMFormValidation.prototype.number = function(el) {
        var max, min, val;
        val = parseInt(el.val(), 10);
        min = el.attr('min') ? parseInt(el.attr('min'), 10) : null;
        max = el.attr('max') ? parseInt(el.attr('max'), 10) : null;
        if (min && val < min) {
          false;
        }
        if (max && val > max) {
          false;
        }
        return {
          element: el,
          msg: "Outside range: " + (el.data('min')) + " - " + (el.data('max'))
        };
      };

      return IPMFormValidation;

    })();
  });

}).call(this);

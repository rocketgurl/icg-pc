// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['BaseView', 'Messenger'], function(BaseView, Messenger) {
    var IPMActionView;
    return IPMActionView = (function(_super) {

      __extends(IPMActionView, _super);

      function IPMActionView() {
        return IPMActionView.__super__.constructor.apply(this, arguments);
      }

      IPMActionView.prototype.MODULE = {};

      IPMActionView.prototype.initialize = function(options) {
        this["super"] = IPMActionView.prototype;
        if (options.PARENT_VIEW != null) {
          this.PARENT_VIEW = options.PARENT_VIEW;
        }
        if (options.MODULE != null) {
          this.MODULE = options.MODULE;
        }
        if (this.MODULE.CONTAINER) {
          this.$el = this.MODULE.CONTAINER;
        }
        delete this.options;
        return this.on('ready', this.ready, this);
      };

      IPMActionView.prototype.fetchTemplates = function(policy, action, callback) {
        var model, path, view;
        if (!(policy != null) || !(action != null)) {
          return false;
        }
        path = "js/modules/IPM/products/" + (policy.get('productName')) + "/forms/" + (_.slugify(action));
        model = $.getJSON("" + path + "/model.json").pipe(function(resp) {
          return resp;
        });
        view = $.get("" + path + "/view.html", null, null, "text").pipe(function(resp) {
          return resp;
        });
        return $.when(model, view).then(callback, this.PARENT_VIEW.actionError);
      };

      IPMActionView.prototype.ready = function() {};

      IPMActionView.prototype.render = function() {};

      IPMActionView.prototype.validate = function() {};

      IPMActionView.prototype.preview = function() {};

      return IPMActionView;

    })(BaseView);
  });

}).call(this);

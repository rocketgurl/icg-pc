// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['BaseView', 'Messenger'], function(BaseView, Messenger) {
    var IPMView, dlogger;
    dlogger = function(methodBody) {
      return function() {
        if (this.DEBUG != null) {
          console.log("DEBUG IPMView ->");
          console.log([this, this.options, arguments]);
        }
        return methodBody.apply(this, arguments);
      };
    };
    return IPMView = (function(_super) {

      __extends(IPMView, _super);

      function IPMView() {
        return IPMView.__super__.constructor.apply(this, arguments);
      }

      IPMView.prototype.VIEW_STATE = '';

      IPMView.prototype.VIEW_CACHE = {};

      IPMView.prototype.FLASH_HTML = '';

      IPMView.prototype.LOADER = {};

      IPMView.prototype.initialize = function(options) {
        this.DEBUG = options.DEBUG != null;
        this.MODULE = options.MODULE || false;
        this.FLASH_HTML = this.Mustache.render($('#tpl-flash-message').html(), {
          cid: this.cid
        });
        this.$el = this.MODULE.CONTAINER;
        this.$el.html(this.FLASH_HTML);
        this.$el.find("#flash-message-" + this.cid).addClass('ipm-flash');
        this.$el.append("<div id=\"ipm-loader-" + this.cid + "\" class=\"ipm-loader\">\n  <h2 id=\"ipm-spinner-" + this.cid + "\"><span>Loading action&hellip;</span></h2>\n</div>");
        this.$el.append("<div id=\"ipm-container-" + this.cid + "\" class=\"ipm-container\"></div>");
        if (_.isEmpty(this.VIEW_STATE)) {
          return this.route('Home');
        }
      };

      IPMView.prototype.route = function(action) {
        var _this = this;
        this.VIEW_STATE = action;
        if (!_.has(this.VIEW_CACHE, action)) {
          this.insert_loader();
          return require(["" + this.MODULE.CONFIG.ACTIONS_PATH + action], function(Action) {
            _this.VIEW_CACHE[action] = new Action({
              MODULE: _this.MODULE
            });
            return _this.render(_this.VIEW_CACHE[action]);
          }, function(err) {
            var failedId;
            failedId = err.requireModules && err.requireModules[0];
            _this.Amplify.publish(_this.cid, 'warning', "We could not load " + failedId + ". Sorry.");
            return _this.route('Home');
          });
        } else {
          return this.render(this.VIEW_CACHE[action]);
        }
      };

      IPMView.prototype.render = dlogger(function(action) {
        var container,
          _this = this;
        this.remove_loader();
        container = this.$el.find("#ipm-container-" + this.cid);
        container.fadeOut('fast', function() {
          return container.html(action.render()).fadeIn('fast');
        });
        return this.messenger = new Messenger(this, this.cid);
      });

      IPMView.prototype.insert_loader = function() {
        this.LOADER = this.Helpers.loader("ipm-spinner-" + this.cid, 100, '#ffffff');
        this.LOADER.setDensity(70);
        this.LOADER.setFPS(48);
        return this.$el.find("#ipm-loader-" + this.cid).show();
      };

      IPMView.prototype.remove_loader = function() {
        this.LOADER.kill();
        return this.$el.find("#ipm-loader-" + this.cid).hide();
      };

      return IPMView;

    })(BaseView);
  });

}).call(this);

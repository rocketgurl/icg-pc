// Generated by CoffeeScript 1.3.3
(function() {

  define(['BaseView', 'Messenger', 'modules/RenewalUnderwriting/RenewalUnderwritingModel', 'text!modules/RenewalUnderwriting/templates/tpl_renewal_underwriting_container.html', 'text!modules/RenewalUnderwriting/templates/tpl_renewal_underwriting_assignee.html', 'text!modules/RenewalUnderwriting/templates/tpl_renewal_underwriting_disposition.html', 'jqueryui'], function(BaseView, Messenger, RenewalUnderwritingModel, tpl_ru_container, tpl_ru_assignees, tpl_ru_disposition) {
    var RenewalUnderwritingView;
    return RenewalUnderwritingView = BaseView.extend({
      CHANGESET: {},
      DATEPICKER: '',
      events: {
        'click a[href=assigned_to]': function(e) {
          return this.changeAssignment(this.process_event(e));
        },
        'click a[href=current_disposition]': function(e) {
          return this.changeDisposition(this.process_event(e));
        },
        'click a[href=review_period]': function(e) {
          return this.reviewPeriod(this.process_event(e));
        },
        'click a[href=review_deadline]': function(e) {
          return this.reviewDeadline(this.process_event(e));
        },
        'click .menu-close': function(e) {
          return this.Modal.clear_menu(e);
        },
        'click .ru-assignees-row a': function(e) {
          return this.selectAssignee(this.process_event(e));
        }
      },
      initialize: function(options) {
        this.$el = options.$el;
        this.policy = options.policy;
        this.policy_view = options.policy_view;
        this.renewal_model = new RenewalUnderwritingModel({
          id: this.policy.id,
          urlRoot: this.policy.urlRoot,
          digest: this.policy.get('digest')
        });
        this.renewal_model.on('renewal:success', this.renewalSuccess, this);
        return this.renewal_model.on('renewal:error', this.renewalError, this);
      },
      render: function() {
        this.show();
        $("#ru-loader-" + this.policy_view.cid).show();
        this.loader = this.Helpers.loader("ru-spinner-" + this.policy_view.cid, 80, '#696969');
        this.loader.setFPS(48);
        this.renewal_model.fetch({
          url: '/mocks/renewal_underwriting_get.json',
          success: function(model, resp) {
            model.trigger('renewal:success', resp);
            return model.use_cripple();
          },
          error: function(model, resp) {
            model.trigger('renewal:error', resp);
            return model.use_cripple();
          }
        });
        return this;
      },
      removeLoader: function() {
        this.loader.kill();
        return $("#ru-loader-" + this.cid).hide();
      },
      show: function() {
        return this.$el.fadeIn('fast');
      },
      hide: function() {
        return this.$el.hide();
      },
      process_event: function(e) {
        e.preventDefault();
        return $(e.currentTarget);
      },
      changeAssignment: function(el) {
        var data;
        data = {
          cid: this.cid,
          assignees: [
            {
              id: 1,
              name: 'Alice'
            }, {
              id: 2,
              name: 'Bob'
            }, {
              id: 3,
              name: 'Cipher'
            }
          ]
        };
        return this.Modal.attach_menu(el, '.ru-menus', tpl_ru_assignees, data);
      },
      selectAssignee: function(el) {
        return console.log(['selectAssignee', el]);
      },
      changeDisposition: function(el) {
        var data;
        data = {
          cid: this.cid,
          dispositions: [
            {
              id: 1,
              name: 'Pending'
            }, {
              id: 2,
              name: 'Dead'
            }, {
              id: 3,
              name: 'Vaporized'
            }
          ]
        };
        return this.Modal.attach_menu(el, '.ru-menus', tpl_ru_disposition, data);
      },
      reviewPeriod: function(el) {
        return this.$el.find('input[name=reviewPeriod]').datepicker("show");
      },
      reviewDeadline: function(el) {
        return this.$el.find('input[name=reviewDeadline]').datepicker("show");
      },
      attachDatepickers: function() {
        var options;
        this.dateChanged = _.bind(this.dateChanged, this);
        this.setDatepicker = _.bind(this.setDatepicker, this);
        options = {
          dateFormat: 'yy-mm-dd',
          onClose: this.dateChanged,
          beforeShow: this.setDatepicker
        };
        this.$el.find('input[name=reviewPeriod]').datepicker(options);
        return this.$el.find('input[name=reviewDeadline]').datepicker(options);
      },
      dateChanged: function(date) {
        var field;
        field = "renewal." + ($(this.DATEPICKER).attr('name'));
        if (this.processChange(field, date)) {
          return this.Amplify.publish(this.policy_view.cid, 'success', "Saved changes!", 2000);
        }
      },
      processChange: function(field, val) {
        var old_val;
        old_val = '';
        field = field.indexOf('.') > -1 ? field.split('.') : field;
        if (_.isArray(field)) {
          old_val = this.CHANGESET[field[0]][field[1]];
        } else {
          old_val = field;
        }
        if (old_val !== val) {
          if (_.isArray(field)) {
            this.CHANGESET[field[0]][field[1]] = val;
            this.renewal_model.set(field[0], this.CHANGESET[field[0]]);
          } else {
            this.renewal_model.set(field, val);
          }
          console.log(this.renewal_model.attributes);
          console.log("CHANGED: " + field + " to " + val);
          return true;
        } else {
          console.log("NO CHANGE");
          return false;
        }
      },
      setDatepicker: function(el) {
        return this.DATEPICKER = el;
      },
      renewalSuccess: function(resp) {
        if (resp != null) {
          resp.cid = this.cid;
          this.CHANGESET = {
            renewal: _.omit(resp.renewal, ["inspectionOrdered", "renewalReviewRequired"]),
            insuranceScore: resp.insuranceScore.currentDisposition
          };
          this.$el.html(this.Mustache.render(tpl_ru_container, resp));
          this.removeLoader();
          this.show();
          return this.attachDatepickers();
        }
      },
      renewalError: function(resp) {
        return this.Amplify.publish(this.policy_view.cid, 'warning', "Could not retrieve renewal underwriting information: " + resp.statusText + " (" + resp.status + ")");
      }
    });
  });

}).call(this);

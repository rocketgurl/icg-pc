// Generated by CoffeeScript 1.3.3
(function() {

  define(['BaseView', 'Messenger', 'text!modules/RenewalUnderwriting/templates/tpl_renewal_underwriting_container.html', 'text!modules/RenewalUnderwriting/templates/tpl_renewal_underwriting_assignee.html', 'text!modules/RenewalUnderwriting/templates/tpl_renewal_underwriting_disposition.html'], function(BaseView, Messenger, tpl_ru_container, tpl_ru_assignees, tpl_ru_disposition) {
    var RenewalUnderwritingView;
    return RenewalUnderwritingView = BaseView.extend({
      events: {
        'click a[href=assigned_to]': function(e) {
          return this.changeAssignment(this.process_event(e));
        },
        'click a[href=current_disposition]': function(e) {
          return this.changeDisposition(this.process_event(e));
        },
        'click .menu-close': function(e) {
          return this.clear_menu(e);
        }
      },
      initialize: function(options) {
        this.$el = options.$el;
        this.policy = options.policy;
        this.policy_view = options.policy_view;
        this.policy.on('renewal:success', this.renewalSuccess, this);
        return this.policy.on('renewal:error', this.renewalError, this);
      },
      render: function() {
        var load;
        this.show();
        $("#ru-loader-" + this.policy_view.cid).show();
        this.loader = this.Helpers.loader("ru-spinner-" + this.policy_view.cid, 80, '#696969');
        this.loader.setFPS(48);
        load = _.bind(this.policy.fetchRenewalMetadata, this.policy);
        _.delay(load, 1000);
        return this;
      },
      removeLoader: function() {
        this.loader.kill();
        return $("#ru-loader-" + this.cid).hide();
      },
      show: function() {
        return this.$el.fadeIn('fast');
      },
      hide: function() {
        return this.$el.hide();
      },
      process_event: function(e) {
        e.preventDefault();
        return $(e.currentTarget);
      },
      attach_menu: function(el, template, view_data) {
        var container, menu;
        container = el.parent();
        menu = container.find('.ru-menus');
        if (menu.length === 0) {
          menu = this.Mustache.render(template, view_data);
          container.append(menu).find('div').fadeIn(200);
        } else {
          menu.fadeIn('fast');
        }
        return this.overlay_trigger(container.find('.ru-menus'));
      },
      clear_menu: function(e) {
        if (e.currentTarget != null) {
          $(e.currentTarget).parents('.ru-menus').fadeOut(100);
        } else {
          e.fadeOut('fast');
        }
        return $('.ru-overlay').remove();
      },
      overlay_trigger: function(menu) {
        var overlay,
          _this = this;
        this.menu = menu;
        overlay = $("<div></div>").addClass('ru-overlay').css({
          width: '100%',
          height: '100%',
          position: 'absolute',
          zIndex: 640,
          background: 'transparent'
        });
        $('body').prepend(overlay);
        return $(overlay).on('click', function(e) {
          return _this.clear_menu(_this.menu);
        });
      },
      changeAssignment: function(el) {
        var data;
        data = {
          cid: this.cid,
          assignees: [
            {
              id: 1,
              name: 'Alice'
            }, {
              id: 2,
              name: 'Bob'
            }, {
              id: 3,
              name: 'Cipher'
            }
          ]
        };
        return this.attach_menu(el, tpl_ru_assignees, data);
      },
      changeDisposition: function(el) {
        var data;
        data = {
          cid: this.cid,
          dispositions: [
            {
              id: 1,
              name: 'Pending'
            }, {
              id: 2,
              name: 'Dead'
            }, {
              id: 3,
              name: 'Vaporized'
            }
          ]
        };
        return this.attach_menu(el, tpl_ru_disposition, data);
      },
      renewalSuccess: function(resp) {
        if (resp != null) {
          resp.cid = this.cid;
          this.$el.html(this.Mustache.render(tpl_ru_container, resp));
          this.removeLoader();
          return this.show();
        }
      },
      renewalError: function(resp) {
        return this.Amplify.publish(this.policy_view.cid, 'warning', "Could not retrieve renewal underwriting information: " + resp.statusText + " (" + resp.status + ")");
      }
    });
  });

}).call(this);

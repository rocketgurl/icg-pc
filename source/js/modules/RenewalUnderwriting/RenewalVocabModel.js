// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['BaseModel'], function(BaseModel) {
    var RenewalVocabModel;
    return RenewalVocabModel = (function(_super) {

      __extends(RenewalVocabModel, _super);

      function RenewalVocabModel() {
        return RenewalVocabModel.__super__.constructor.apply(this, arguments);
      }

      RenewalVocabModel.prototype.LOCALSTORAGE_KEY = 'ics_renewal_vocab';

      RenewalVocabModel.prototype.LOCALSTORAGE_EXPIRE = 21600000;

      RenewalVocabModel.prototype.initialize = function() {
        return this.use_localStorage(this.LOCALSTORAGE_KEY, this.LOCALSTORAGE_EXPIRE);
      };

      RenewalVocabModel.prototype.url = function() {
        if (this.get('url_root') === void 0) {
          return false;
        }
        return "" + (this.get('url_root')) + "Term/" + this.id;
      };

      RenewalVocabModel.prototype.checkCache = function() {
        return this.fetch({
          success: function(model, response, options) {
            if (model.get('data') !== void 0) {
              return true;
            } else {
              return model.fetchIxVocab();
            }
          },
          error: function(model, xhr, options) {
            return model.fetchIxVocab();
          }
        });
      };

      RenewalVocabModel.prototype.fetchIxVocab = function() {
        this.use_xml();
        return this.fetch({
          success: this.xmlSuccess,
          error: this.xmlError
        });
      };

      RenewalVocabModel.prototype.xmlSuccess = function(model, response, options) {
        var attr;
        attr = {
          data: model.get('json').Enumerations.Enumeration,
          id: model.get('id'),
          url_root: model.get('url_root')
        };
        model.clear();
        model.set(attr);
        model.use_localStorage(model.LOCALSTORAGE_KEY, model.LOCALSTORAGE_EXPIRE);
        return model.save();
      };

      RenewalVocabModel.prototype.xmlError = function(model, xhr, options) {
        return console.log(xhr);
      };

      return RenewalVocabModel;

    })(BaseModel);
  });

}).call(this);

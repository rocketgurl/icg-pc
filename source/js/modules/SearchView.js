// Generated by CoffeeScript 1.3.3
(function() {

  define(['BaseView', 'Messenger', 'modules/SearchPolicyCollection', 'text!templates/tpl_search_container.html', 'text!templates/tpl_search_menu_save.html', 'text!templates/tpl_search_menu_views.html', 'text!templates/tpl_search_menu_share.html'], function(BaseView, Messenger, SearchPolicyCollection, tpl_search_container, tpl_search_menu_save, tpl_search_menu_views, tpl_search_menu_share) {
    var SearchView;
    return SearchView = BaseView.extend({
      menu_cache: {},
      events: {
        "submit .filters form": "search",
        "click .search-control-context > a": function(e) {
          return this.control_context(this.process_event(e));
        },
        "click .search-control-save > a": function(e) {
          return this.control_save(this.process_event(e));
        },
        "click .search-control-share > a": function(e) {
          return this.control_share(this.process_event(e));
        },
        "click .search-control-pin > a": function(e) {
          return this.control_pin(e);
        },
        "click .search-control-refresh": function(e) {
          return this.control_refresh(e);
        },
        "submit .search-menu-save form": function(e) {
          return this.save_search(e);
        },
        "click .icon-remove-circle": function(e) {
          this.clear_menus();
          return this.controls.removeClass('active');
        }
      },
      initialize: function(options) {
        this.el = options.view.el;
        this.$el = options.view.$el;
        this.controller = options.view.options.controller;
        this.module = options.module;
        this.policies = new SearchPolicyCollection();
        this.policies.url = '/mocks/search_response_v2.json';
        this.policies.container = this;
        if (this.module.app.params != null) {
          this.params = this.module.app.params;
        }
        return this.menu_cache[this.cid] = {};
      },
      render: function() {
        var html;
        html = this.Mustache.render($('#tpl-flash-message').html(), {
          cid: this.cid
        });
        html += this.Mustache.render(tpl_search_container, {
          cid: this.cid
        });
        this.$el.html(html);
        this.controls = this.$el.find('.search-controls');
        this.messenger = new Messenger(this.options.view, this.cid);
        if (this.params != null) {
          this.$el.find('input[type=search]').val(this.params.query);
          return this.search();
        }
      },
      search: function(e) {
        var search_val,
          _this = this;
        if (e != null) {
          e.preventDefault();
        }
        search_val = this.$el.find('input[type=search]').val();
        this.policies.reset();
        return this.policies.fetch({
          headers: {
            'X-Authorization': "Basic " + (this.controller.user.get('digest')),
            'Authorization': "Basic " + (this.controller.user.get('digest'))
          },
          success: function(collection, resp) {
            collection.render();
            _this.params = {
              url: search_val,
              query: search_val
            };
            return _this.controller.Router.append_module('search', _this.params);
          },
          error: function(collection, resp) {
            return _this.Amplify.publish(_this.cid, 'warning', "There was a problem with this request: " + resp.status + " - " + resp.statusText);
          }
        });
      },
      toggle_controls: function(id) {
        var $el;
        $el = this.$el.find("." + id);
        if ($el.hasClass('active')) {
          return this.controls.removeClass('active');
        } else {
          this.controls.removeClass('active');
          return $el.addClass('active');
        }
      },
      process_event: function(e) {
        var $el, id;
        this.clear_menus();
        e.preventDefault();
        $el = $(e.currentTarget).parent();
        id = $el.attr('class').split(' ');
        this.toggle_controls(id[1]);
        return $el;
      },
      clear_menus: function() {
        return _.each(this.menu_cache[this.cid], function(menu, id) {
          return menu.fadeOut(100);
        });
      },
      attach_menu: function(e, template, view_data) {
        var cache_key, el_width;
        if (!(view_data != null)) {
          view_data = {};
        }
        cache_key = e.attr('class').split(' ')[1];
        if (this.menu_cache[this.cid][cache_key] !== void 0) {
          this.menu_cache[this.cid][cache_key].fadeIn(100);
          return false;
        } else {
          el_width = e.css('width');
          e.append(this.Mustache.render(template, view_data));
          this.menu_cache[this.cid][cache_key] = e.find("div");
          this.menu_cache[this.cid][cache_key].fadeIn(100);
          return this.menu_cache[this.cid][cache_key];
        }
      },
      control_context: function(e) {
        var menu;
        if (e.hasClass('active')) {
          menu = this.attach_menu(e, tpl_search_menu_views);
          if (menu) {
            return this.controller.SEARCH.saved_searches.populate(menu);
          }
        }
      },
      control_save: function(e) {
        if (e.hasClass('active')) {
          return this.attach_menu(e, tpl_search_menu_save);
        }
      },
      control_share: function(e) {
        if (e.hasClass('active')) {
          return this.attach_menu(e, tpl_search_menu_share);
        }
      },
      control_pin: function(e) {
        var params, search_val;
        e.preventDefault();
        search_val = this.$el.find('input[type=search]').val();
        params = {
          url: search_val,
          query: search_val
        };
        this.controller.launch_module('search', params);
        return this.controller.Router.append_module('search', params);
      },
      control_refresh: function(e) {
        e.preventDefault();
        return this.search();
      },
      save_search: function(e) {
        var val;
        e.preventDefault();
        val = $('#search_save_label').val();
        return this.controller.SEARCH.saved_searches.create({
          label: val,
          params: this.params
        });
      }
    });
  });

}).call(this);

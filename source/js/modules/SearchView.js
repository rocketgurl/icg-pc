// Generated by CoffeeScript 1.3.3
(function() {

  define(['BaseView', 'Helpers', 'Messenger', 'modules/SearchPolicyCollection', 'text!templates/tpl_search_container.html', 'text!templates/tpl_search_menu_save.html', 'text!templates/tpl_search_menu_views.html', 'text!templates/tpl_search_menu_share.html'], function(BaseView, Helpers, Messenger, SearchPolicyCollection, tpl_search_container, tpl_search_menu_save, tpl_search_menu_views, tpl_search_menu_share) {
    var SearchView;
    return SearchView = BaseView.extend({
      menu_cache: {},
      events: {
        "submit .filters form": "search",
        "change .search-pagination-perpage": "search",
        "change .search-pagination-page": "search",
        "click .search-control-context > a": function(e) {
          return this.control_context(this.process_event(e));
        },
        "click .search-control-save > a": function(e) {
          return this.control_save(this.process_event(e));
        },
        "click .search-control-share > a": function(e) {
          return this.control_share(this.process_event(e));
        },
        "click .search-control-pin > a": function(e) {
          return this.control_pin(e);
        },
        "click .search-control-refresh": function(e) {
          return this.control_refresh(e);
        },
        "submit .search-menu-save form": function(e) {
          return this.save_search(e);
        },
        "click .search-sort-link": "sort_by",
        "click .icon-remove-circle": function(e) {
          this.clear_menus();
          return this.controls.removeClass('active');
        }
      },
      initialize: function(options) {
        this.el = options.view.el;
        this.$el = options.view.$el;
        this.controller = options.view.options.controller;
        this.module = options.module;
        this.policies = new SearchPolicyCollection();
        this.policies.url = this.controller.services.pxcentral + 'policies';
        this.policies.container = this;
        if (this.module.app.params != null) {
          this.params = this.module.app.params;
        }
        return this.menu_cache[this.cid] = {};
      },
      render: function() {
        var html;
        html = this.Mustache.render($('#tpl-flash-message').html(), {
          cid: this.cid
        });
        html += this.Mustache.render(tpl_search_container, {
          cid: this.cid,
          pagination: this.policies.pagination
        });
        this.$el.html(html);
        this.controls = this.$el.find('.search-controls');
        this.messenger = new Messenger(this.options.view, this.cid);
        if (this.params != null) {
          this.set_search_options(this.params);
          return this.fetch(this.get_search_options(this.params));
        }
      },
      search: function(e) {
        if (e != null) {
          e.preventDefault();
        }
        return this.fetch(this.get_search_options());
      },
      set_search_options: function(options) {
        if (_.has(options, 'query')) {
          this.$el.find('input[type=search]').val(options.query);
        }
        if (_.has(options, 'state')) {
          this.$el.find('.query-type').val(options.state);
        }
        if (_.has(options, 'perpage')) {
          this.$el.find('.search-pagination-perpage').val(options.perpage);
        }
        if (_.has(options, 'page')) {
          return this.$el.find('.search-pagination-page').val(options.page);
        }
      },
      get_search_options: function(options) {
        var key, page, perpage, q, query, state, value, _ref, _ref1, _ref2, _ref3;
        perpage = (_ref = this.$el.find('.search-pagination-perpage').val()) != null ? _ref : 15;
        page = (_ref1 = this.$el.find('.search-pagination-page').val()) != null ? _ref1 : 1;
        state = (_ref2 = this.$el.find('.query-type').val()) != null ? _ref2 : '';
        q = (_ref3 = this.$el.find('input[type=search]').val()) != null ? _ref3 : '';
        query = {
          q: q,
          perpage: perpage,
          page: page,
          state: state
        };
        if (options === !void 0 && !null) {
          query = _.extend(query, options);
        }
        for (key in options) {
          value = options[key];
          this.params[key] = value;
        }
        return query;
      },
      fetch: function(query) {
        var _this = this;
        this.loader_ui(true);
        this.policies.reset();
        return this.policies.fetch({
          data: query,
          headers: {
            'X-Authorization': "Basic " + (this.controller.user.get('digest')),
            'Authorization': "Basic " + (this.controller.user.get('digest'))
          },
          success: function(collection, resp) {
            if (collection.models.length === 0) {
              _this.loader_ui(false);
              _this.Amplify.publish(_this.cid, 'notice', "No policies found when searching for " + query.q);
              return;
            }
            collection.render();
            _this.loader_ui(false);
            _this.params = {
              url: query.q,
              query: query.q
            };
            _this.params = _.extend(_this.params, _this.get_search_options());
            return _this.controller.Router.append_module('search', _this.params);
          },
          error: function(collection, resp) {
            _this.Amplify.publish(_this.cid, 'warning', "There was a problem with this request: " + resp.status + " - " + resp.statusText);
            return _this.loader_ui(false);
          }
        });
      },
      toggle_controls: function(id) {
        var $el;
        $el = this.$el.find("." + id);
        if ($el.hasClass('active')) {
          return this.controls.removeClass('active');
        } else {
          this.controls.removeClass('active');
          return $el.addClass('active');
        }
      },
      process_event: function(e) {
        var $el, id;
        this.clear_menus();
        e.preventDefault();
        $el = $(e.currentTarget).parent();
        id = $el.attr('class').split(' ');
        this.toggle_controls(id[1]);
        return $el;
      },
      clear_menus: function() {
        return _.each(this.menu_cache[this.cid], function(menu, id) {
          return menu.fadeOut(100);
        });
      },
      attach_menu: function(e, template, view_data) {
        var cache_key, el_width;
        if (!(view_data != null)) {
          view_data = {};
        }
        cache_key = e.attr('class').split(' ')[1];
        if (this.menu_cache[this.cid][cache_key] !== void 0) {
          this.menu_cache[this.cid][cache_key].fadeIn(100);
          return false;
        } else {
          el_width = e.css('width');
          e.append(this.Mustache.render(template, view_data));
          this.menu_cache[this.cid][cache_key] = e.find("div");
          this.menu_cache[this.cid][cache_key].fadeIn(100);
          return this.menu_cache[this.cid][cache_key];
        }
      },
      control_context: function(e) {
        var menu;
        if (e.hasClass('active')) {
          menu = this.attach_menu(e, tpl_search_menu_views);
          if (menu) {
            return this.controller.SEARCH.saved_searches.populate(menu);
          }
        }
      },
      control_save: function(e) {
        if (e.hasClass('active')) {
          return this.attach_menu(e, tpl_search_menu_save);
        }
      },
      control_share: function(e) {
        if (e.hasClass('active')) {
          return this.attach_menu(e, tpl_search_menu_share);
        }
      },
      control_pin: function(e) {
        var params, search_val;
        e.preventDefault();
        search_val = this.$el.find('input[type=search]').val();
        params = {
          url: search_val,
          query: search_val
        };
        this.controller.launch_module('search', params);
        return this.controller.Router.append_module('search', params);
      },
      control_refresh: function(e) {
        var options;
        e.preventDefault();
        options = {
          'cache-control': 'no-cache'
        };
        return this.fetch(this.get_search_options(options));
      },
      save_search: function(e) {
        var val;
        e.preventDefault();
        val = $('#search_save_label').val();
        return this.controller.SEARCH.saved_searches.create({
          label: val,
          params: this.params
        });
      },
      loader_ui: function(bool) {
        if (bool && !(this.loader != null)) {
          this.loader = Helpers.loader("search-spinner-" + this.cid, 100, '#ffffff');
          this.loader.setDensity(70);
          this.loader.setFPS(48);
          return $("#search-loader-" + this.cid).show();
        } else {
          if (this.loader != null) {
            this.loader.kill();
            this.loader = null;
          }
          return $("#search-loader-" + this.cid).hide();
        }
      },
      sort_by: function(e) {
        var $el, options;
        e.preventDefault();
        $el = $(e.currentTarget);
        options = {
          'sort': $el.attr('href'),
          'sort-dir': $el.data('dir')
        };
        this.fetch(this.get_search_options(options));
        if ($el.data('dir') === 'asc') {
          return $el.data('dir', 'desc');
        } else {
          return $el.data('dir', 'asc');
        }
      }
    });
  });

}).call(this);

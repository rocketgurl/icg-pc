// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'underscore', 'backbone', 'UserModel', 'ConfigModel', 'WorkspaceLoginView', 'WorkspaceCanvasView', 'WorkspaceNavView', 'WorkspaceRouter', 'base64', 'MenuHelper', 'amplify_core', 'amplify_store', 'cookie', 'xml2json'], function($, _, Backbone, UserModel, ConfigModel, WorkspaceLoginView, WorkspaceCanvasView, WorkspaceNavView, WorkspaceRouter, Base64, MenuHelper, amplify) {
    var $flash, WorkspaceController, ics360,
      _this = this;
    window.ICS360_ENV = 'staging';
    amplify.subscribe('log', function(msg) {
      return console.log(msg);
    });
    $flash = $('#flash-message');
    amplify.subscribe('flash', function(type, msg) {
      if (type != null) {
        $flash.attr('class', type);
      }
      if (msg != null) {
        msg += ' <i class="icon-remove-sign"></i>';
        return $flash.html(msg).fadeIn('fast');
      }
    });
    $flash.on('click', 'i', function(event) {
      event.preventDefault();
      return $flash.fadeOut('fast');
    });
    ics360 = {
      services: {
        ixdirectory: './ixdirectory/api/rest/v2/',
        pxcentral: './pxcentral/api/rest/v1/',
        ixlibrary: './ixlibrary/api/sdo/rest/v1/',
        ixdoc: './ixdoc/api/rest/v2/',
        ixadmin: './config/ics/staging/ixadmin'
      }
    };
    WorkspaceController = {
      Amplify: amplify,
      $workspace_header: $('#header'),
      $workspace_button: $('#button-workspace'),
      $workspace_breadcrumb: $('#breadcrumb'),
      $workspace_admin: $('#header-admin'),
      $workspace_canvas: $('#canvas'),
      $workspace_tabs: $('#workspace nav ul'),
      Router: new WorkspaceRouter(),
      COOKIE_NAME: 'ics360.PolicyCentral',
      workspace_stack: [],
      stack_add: function(view) {
        var exists;
        exists = _.find(this.workspace_stack, function(item) {
          return item.options.app === view.options.app;
        });
        if (!(exists != null)) {
          return this.workspace_stack.push(view);
        }
      },
      stack_remove: function(view) {
        var index, obj, _ref, _results;
        _ref = this.workspace_stack;
        _results = [];
        for (index in _ref) {
          obj = _ref[index];
          if (view.app.app === obj.app.app) {
            _results.push(this.workspace_stack.splice(index, 1));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      stack_clear: function() {
        var view, _i, _len, _ref, _results;
        _ref = this.workspace_stack;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          _results.push(this.stack_remove(view));
        }
        return _results;
      },
      stack_get: function(app) {
        var index, obj, _ref;
        _ref = this.workspace_stack;
        for (index in _ref) {
          obj = _ref[index];
          if (app === obj.app.app) {
            return obj;
          }
        }
      },
      logger: function(msg) {
        return this.Amplify.publish('log', msg);
      },
      flash: function(type, msg) {
        return this.Amplify.publish('flash', type, msg);
      },
      check_cookie_identity: function() {
        var cookie;
        if (cookie = $.cookie(this.COOKIE_NAME)) {
          cookie = Base64.decode(cookie).split(':');
          return this.check_credentials(cookie[0], cookie[1]);
        } else {
          return this.Router.navigate('login', {
            trigger: true
          });
        }
      },
      set_cookie_identity: function(digest) {
        return $.cookie(this.COOKIE_NAME, digest, {
          expires: 7
        });
      },
      build_login: function() {
        this.login_view = new WorkspaceLoginView({
          controller: this,
          template: $('#tpl-ics-login'),
          template_tab: $('#tpl-workspace-tab').html(),
          tab_label: 'Login'
        });
        this.login_view.render();
        if (this.navigation_view != null) {
          return this.navigation_view.destroy();
        }
      },
      check_credentials: function(username, password) {
        var _this = this;
        this.user = new UserModel({
          urlRoot: ics360.services.ixdirectory + 'identities',
          'username': username,
          'password': password
        });
        return this.user.fetch({
          success: function(model, resp) {
            _this.user.response_state();
            switch (_this.user.get('fetch_state').code) {
              case "200":
                return _this.login_success(model, resp);
              default:
                return _this.login_fail(model, resp, _this.user.get('fetch_state'));
            }
          },
          error: function(model, resp) {
            return _this.response_fail(model, resp);
          }
        });
      },
      response_fail: function(model, resp) {
        this.flash('warning', "There was a problem retreiving the configuration file. Please contact support. Error: " + resp.status + " - " + resp.statusText);
        return this.logger("PHALE!");
      },
      login_success: function(model, resp) {
        this.get_configs();
        this.user.parse_identity();
        this.set_cookie_identity(this.user.get('digest'));
        this.set_admin_links();
        if (this.login_view != null) {
          return this.login_view.destroy();
        }
      },
      login_fail: function(model, resp, state) {
        this.Router.navigate('login', {
          trigger: true
        });
        return this.flash('warning', "SOWWEE you no enter cause " + state.text);
      },
      logout: function() {
        $.cookie(this.COOKIE_NAME, null);
        this.user = null;
        this.reset_admin_links();
        return this.navigation_view.destroy();
      },
      get_configs: function() {
        var _this = this;
        this.config = new ConfigModel({
          urlRoot: ics360.services.ixadmin
        });
        return this.config.fetch({
          success: function(model, resp) {
            _this.config.set('menu', MenuHelper.build_menu(_this.user.get('document'), model.get('document')));
            _this.config.set('menu_html', MenuHelper.generate_menu(_this.config.get('menu')));
            _this.navigation_view = new WorkspaceNavView({
              router: _this.Router,
              controller: _this,
              el: '#header-workspace-nav',
              sub_el: '#workspace-subnav',
              main_nav: _this.config.get('menu_html').main_nav,
              sub_nav: _this.config.get('menu_html').sub_nav
            });
            _this.navigation_view.render();
            if (_this.current_state != null) {
              return _this.trigger('launch');
            }
          },
          error: function(model, resp) {
            return _this.flash('warning', "There was a problem retreiving the configuration file. Please contact support.");
          }
        });
      },
      callback_delay: function(ms, func) {
        return setTimeout(func, ms);
      },
      launch_workspace: function() {
        var app, apps, group_label, menu,
          _this = this;
        menu = this.config.get('menu');
        group_label = apps = menu[this.current_state.business].contexts[this.current_state.context].label;
        apps = menu[this.current_state.business].contexts[this.current_state.context].apps;
        app = _.find(apps, function(app) {
          return app.app === _this.current_state.app;
        });
        this.stack_clear();
        this.launch_app(app);
        return this.$workspace_breadcrumb.html("<li><em>" + this.current_state.business + "</em></li>\n<li><em>" + group_label + "</em></li>\n<li><em>" + app.app_label + "</em></li>");
      },
      launch_app: function(app) {
        var newapp, wenapp, wneapp;
        newapp = new WorkspaceCanvasView({
          controller: this,
          'app': app
        });
        wenapp = new WorkspaceCanvasView({
          controller: this,
          'app': {
            app: 'search',
            app_label: 'Search'
          }
        });
        wneapp = new WorkspaceCanvasView({
          controller: this,
          'app': {
            app: 'extreme_snorkeling',
            app_label: 'Extreme Snorkeling'
          }
        });
        return console.log(this.workspace_stack);
      },
      set_admin_links: function() {
        if (!(this.$workspace_admin_initial != null)) {
          this.$workspace_admin_initial = this.$workspace_admin.find('ul').html();
        }
        return this.$workspace_admin.find('ul').html("<li>Welcome back &nbsp;<a href=\"#profile\">" + (this.user.get('name')) + "</a></li>\n<li><a href=\"#logout\">Logout</a></li>");
      },
      reset_admin_links: function() {
        return this.$workspace_admin.find('ul').html(this.$workspace_admin_initial);
      },
      attach_tab_handlers: function() {
        var _this = this;
        this.$workspace_tabs.on('click', 'li a', function(e) {
          var app_name;
          e.preventDefault();
          app_name = $(e.target).attr('href');
          return _this.toggle_apps(app_name);
        });
        return this.$workspace_tabs.on('click', 'li i', function(e) {
          e.preventDefault();
          _this.stack_get($(e.target).prev().attr('href')).destroy();
          return _this.reassess_apps();
        });
      },
      toggle_apps: function(app_name) {
        var view, _i, _len, _ref, _results;
        _ref = this.workspace_stack;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          if (app_name === view.app.app) {
            _results.push(view.activate());
          } else {
            _results.push(view.deactivate());
          }
        }
        return _results;
      },
      reassess_apps: function() {
        var active, last_view;
        if (this.workspace_stack.length === 0) {
          return false;
        }
        active = _.filter(this.workspace_stack, function(view) {
          return view.is_active();
        });
        if (active.length === 0) {
          last_view = _.last(this.workspace_stack);
          return this.toggle_apps(last_view.app.app);
        }
      },
      init: function() {
        this.Router.controller = this;
        Backbone.history.start();
        this.check_cookie_identity();
        return this.attach_tab_handlers();
      }
    };
    _.extend(WorkspaceController, Backbone.Events);
    WorkspaceController.on("log", function(msg) {
      return this.logger(msg);
    });
    WorkspaceController.on("login", function() {
      return this.build_login();
    });
    WorkspaceController.on("logout", function() {
      return this.logout();
    });
    WorkspaceController.on("launch", function() {
      return this.launch_workspace();
    });
    WorkspaceController.on("stack_add", function(view) {
      return this.stack_add(view);
    });
    WorkspaceController.on("stack_remove", function(view) {
      return this.stack_remove(view);
    });
    return WorkspaceController.on("new_tab", function(app_name) {
      return this.toggle_apps(app_name);
    });
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'underscore', 'backbone', 'UserModel', 'WorkspaceLoginView', 'WorkspaceRouter', 'amplify_core', 'amplify_store', 'cookie'], function($, _, Backbone, UserModel, WorkspaceLoginView, WorkspaceRouter, amplify) {
    var $flash, WorkspaceController, ics360;
    amplify.subscribe('log', function(msg) {
      return console.log(msg);
    });
    $flash = $('#flash-message');
    amplify.subscribe('flash', function(type, msg) {
      if (type != null) {
        $flash.attr('class', type);
      }
      if (msg != null) {
        msg += ' <i class="icon-remove-sign"></i>';
        return $flash.html(msg).fadeIn('fast');
      }
    });
    $flash.on('click', 'i', function(event) {
      event.preventDefault();
      return $flash.fadeOut('fast');
    });
    ics360 = {
      services: {
        ixdirectory: './ixdirectory/api/rest/v2/',
        pxcentral: './pxcentral/api/rest/v1/',
        ixlibrary: './ixlibrary/api/sdo/rest/v1/',
        ixdoc: './ixdoc/api/rest/v2/'
      }
    };
    WorkspaceController = {
      Amplify: amplify,
      workspace_button: $('#button-workspace'),
      workspace_breadcrumb: $('#breadcrump'),
      workspace_admin: $('#header-admin'),
      workspace_canvas: $('#canvas'),
      router: new WorkspaceRouter(),
      logger: function(msg) {
        return this.Amplify.publish('log', msg);
      },
      flash: function(type, msg) {
        return this.Amplify.publish('flash', type, msg);
      },
      build_login: function() {
        this.user = new UserModel();
        this.login_view = new WorkspaceLoginView({
          controller: this,
          el: '#target',
          template: $('#tpl-ics-login')
        });
        return this.login_view.render();
      },
      check_credentials: function(username, password) {
        var _this = this;
        this.user = new UserModel({
          urlRoot: ics360.services.ixdirectory + 'identities',
          'username': username,
          'password': password
        });
        return this.user.fetch({
          success: function(model, resp) {
            _this.user.response_state();
            switch (_this.user.get('fetch_state').code) {
              case "200":
                return _this.login_success(model, resp);
              default:
                return _this.login_fail(model, resp, _this.user.get('fetch_state'));
            }
          },
          error: function(model, resp) {
            return _this.response_fail(model, resp);
          }
        });
      },
      response_fail: function(model, resp) {
        return this.logger("PHALE!");
      },
      login_success: function(model, resp) {
        this.user.parse_identity();
        this.flash('success', "HELLO THERE " + (this.user.get('name')));
        return console.log(this.user);
      },
      login_fail: function(model, resp, state) {
        return this.flash('warning', "SOWWEE you no enter cause " + state.text);
      },
      init: function() {
        return this.build_login();
      }
    };
    _.extend(WorkspaceController, Backbone.Events);
    return WorkspaceController.on("log", function(msg) {
      return this.logger(msg);
    });
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'underscore'], function($, _) {
    var MenuHelper;
    MenuHelper = {
      identity: null,
      ixconfig: null,
      tentacles: null,
      menu: null,
      contexts: null,
      businesses: null,
      app_to_context_map: null,
      build_menu: function(identity, ixconfig) {
        var business_names, compiled_menu;
        this.identity = identity.Identity;
        this.ixconfig = ixconfig.ixConfig;
        this.businesses = this.get_config_item(this.ixconfig, 'businesses');
        business_names = {};
        _.each(this.businesses.ConfigItem, function(business) {
          return business_names[business['-name']] = business['-value'];
        });
        this.businesses = business_names;
        this.contexts = this.build_context_map(this.get_config_item(this.ixconfig, 'contexts'));
        this.app_to_context_map = this.get_context_map(this.contexts);
        this.tentacles = this.get_tentacles(this.get_ixadmin(this.identity)[0]);
        compiled_menu = this.compile_menu_collection(this.businesses, this.tentacles, this.contexts);
        return this.generate_menu(compiled_menu);
      },
      generate_menu: function(tree) {
        return console.log(tree);
      },
      compile_menu_collection: function(businesses, tentacles, contexts) {
        var app, apps, bc, business_label, business_name, groups, t_name, t_val, _i, _len;
        bc = {};
        for (business_name in businesses) {
          business_label = businesses[business_name];
          bc[business_name] = {
            label: business_label,
            contexts: null
          };
          apps = [];
          for (t_name in tentacles) {
            t_val = tentacles[t_name];
            if ((t_val.business != null) && t_val.business === business_name) {
              apps.push(t_val);
            }
          }
          groups = {};
          for (_i = 0, _len = apps.length; _i < _len; _i++) {
            app = apps[_i];
            if (!_.has(groups, app.context.context)) {
              groups[app.context.context] = {
                label: contexts[app.context.context].label,
                apps: []
              };
              groups[app.context.context].apps.push(app);
            } else {
              groups[app.context.context].apps.push(app);
            }
          }
          bc[business_name].contexts = groups;
        }
        return bc;
      },
      collect_tentacles_by_context: function(contexts, tentacles) {
        var collection,
          _this = this;
        collection = {};
        _.each(contexts, function(context, name) {
          var apps;
          collection[name] = {
            label: context.label
          };
          if (context.applications != null) {
            apps = {};
            _.each(context.applications, function(app, app_name) {
              if ((app_name != null) && (app != null)) {
                if (_.has(tentacles, app_name)) {
                  apps[app_name] = app;
                }
                if ((app.businesses != null) && app.businesses['-name']) {
                  return collection[name]['business'] = app.businesses['-name'];
                }
              }
            });
            if (_.keys(apps).length > 0) {
              return collection[name].applications = apps;
            }
          }
        });
        _.each(collection, function(val, name) {
          if (!_.has(val, 'applications')) {
            return delete collection[name];
          }
        });
        return collection;
      },
      get_tentacles: function(data) {
        var out, processed_tentacles, re, tentacle, tentacles, _i, _len,
          _this = this;
        re = RegExp(window.ICS360_ENV, "gi");
        tentacles = _.filter(data.tentacleLink, function(item) {
          return item['-path'].match(re);
        });
        processed_tentacles = _.map(tentacles, function(val, key) {
          var app, app_label, business, context, env, pieces, tentacle, _ref;
          tentacle = val['-path'];
          pieces = tentacle.split('-');
          _ref = [pieces[0], pieces[1], pieces[2]], env = _ref[0], business = _ref[1], app = _ref[2];
          if (_.has(_this.app_to_context_map, app)) {
            app_label = _this.app_to_context_map[app].label;
          } else {
            return null;
          }
          context = _this.app_to_context_map[app];
          if ((context != null) && (context.businesses != null)) {
            if (_.isArray(context.businesses)) {
              business = _.pluck(context.businesses, '-name');
            } else if (_.isObject(context.businesses)) {
              business = context.businesses['-name'];
            }
          }
          return {
            'env': env,
            'business': business,
            'app': app,
            'app_label': app_label,
            'context': context,
            'tentacle': tentacle
          };
        });
        processed_tentacles = _.filter(processed_tentacles, function(item) {
          return item != null;
        });
        out = {};
        for (_i = 0, _len = processed_tentacles.length; _i < _len; _i++) {
          tentacle = processed_tentacles[_i];
          out[tentacle.app] = tentacle;
        }
        return out;
      },
      build_context_map: function(data) {
        var context,
          _this = this;
        context = {};
        _.each(data.ConfigItem, function(item, context_key) {
          var applications, item_apps, item_label;
          item_label = _this.get_config_item(item, 'label');
          if ((item.ConfigItem['-name'] != null) && item.ConfigItem['-name'] === 'applications') {
            item_apps = item.ConfigItem.ConfigItem;
          } else {
            item_apps = _this.get_config_item(item, 'applications');
          }
          context[item['-name']] = {};
          if (item_label != null) {
            context[item['-name']].label = item_label['-value'];
          }
          applications = {};
          _.each(item_apps, function(app) {
            if (_.isObject(app) && app['-name'] !== 'undefined') {
              applications[app['-name']] = app.ConfigItem;
            }
            if (_.isArray(app)) {
              return _.each(app, function(single_app) {
                if (single_app['-name'] !== 'undefined') {
                  return applications[single_app['-name']] = single_app.ConfigItem;
                }
              });
            }
          });
          delete applications['undefined'];
          _.each(applications, function(app, key) {
            return applications[key] = _this.parse_application(app);
          });
          return context[item['-name']]['applications'] = applications;
        });
        return context;
      },
      parse_application: function(app) {
        var out,
          _this = this;
        out = {};
        _.each(app, function(obj) {
          if (_.has(obj, '-value')) {
            return out[obj['-name']] = obj['-value'];
          } else if (_.has(obj, 'ConfigItem')) {
            return out[obj['-name']] = obj.ConfigItem;
          }
        });
        return out;
      },
      get_context_map: function(contexts) {
        var applications, context, key, out, val, _ref;
        out = {};
        for (context in contexts) {
          applications = contexts[context];
          _ref = applications.applications;
          for (key in _ref) {
            val = _ref[key];
            out[key] = val;
            out[key]['context'] = context;
          }
        }
        return out;
      },
      get_contexts: function(data) {
        var list, out;
        list = this.get_config_item(data, 'contexts');
        out = {};
        _.each(list.ConfigItem, function(item) {
          return out[item['-name']] = item.ConfigItem;
        });
        return out;
      },
      get_labels: function(data) {
        var labels, out;
        out = {};
        labels = _.find(data.ConfigItem, function(item) {
          return item['-name'] === 'businesses';
        });
        _.each(labels.ConfigItem, function(item) {
          return out[item['-name']] = item['-value'];
        });
        console.log(out);
        return out;
      },
      get_ixadmin: function(data) {
        return _.filter(data.ApplicationSettings, function(item) {
          return item['-applicationName'] === 'ixadmin' && item['-environmentName'] === window.ICS360_ENV;
        });
      },
      get_config_item: function(collection, name) {
        if ((collection != null) && (collection.ConfigItem != null)) {
          return _.find(collection.ConfigItem, function(item) {
            return item['-name'] === name;
          });
        }
      }
    };
    return MenuHelper;
  });

}).call(this);

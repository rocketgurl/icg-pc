// Generated by CoffeeScript 1.3.3
(function() {

  define(['require', 'jquery', 'underscore', 'mustache', 'text!templates/tpl_main_nav.html', 'text!templates/tpl_sub_nav_container.html', 'text!templates/tpl_sub_nav_ul.html'], function(require, $, _, Mustache, tpl_main_nav, tpl_sub_nav_container, tpl_sub_nav_ul) {
    var MenuHelper;
    MenuHelper = {
      identity: null,
      ixconfig: null,
      tentacles: null,
      menu: null,
      contexts: null,
      businesses: null,
      app_to_context_map: null,
      build_menu: function(identity, ixconfig) {
        var business_names;
        this.identity = identity.find('Identity');
        this.ixconfig = ixconfig.find('ixConfig');
        this.businesses = this.ixconfig.find('ConfigItem[name=businesses]').first().children();
        business_names = {};
        this.businesses.each(function(index, item) {
          item = $(item);
          return business_names[item.attr('name')] = item.attr('value');
        });
        this.businesses = business_names;
        this.contexts = this.build_context_map(this.ixconfig);
        this.app_to_context_map = this.get_context_map(this.contexts);
        this.ixadmin = this.identity.find("ApplicationSettings[applicationName=ixadmin][environmentName=" + window.ICS360_ENV + "]");
        this.tentacles = this.get_tentacles(this.ixadmin);
        if (this.ixadmin.length === 0 || _.isEmpty(this.tentacles)) {
          return false;
        }
        return this.compile_menu_collection(this.businesses, this.tentacles, this.contexts);
      },
      generate_menu: function(data) {
        var a_obj, c_obj, context, html, index, main_nav, name, obj, out, sub_nav, submenu, _ref, _ref1;
        main_nav = {
          main_nav: []
        };
        sub_nav = '';
        for (name in data) {
          obj = data[name];
          if (_.has(obj, 'contexts') && !_.isEmpty(obj.contexts)) {
            main_nav.main_nav.push({
              url: name,
              label: obj.label,
              business: name
            });
          }
          submenu = {
            sub_nav_id: name,
            submenu: ''
          };
          _ref = obj.contexts;
          for (context in _ref) {
            c_obj = _ref[context];
            out = {
              sub_nav: []
            };
            out.label = this.check_length(c_obj.label);
            _ref1 = c_obj.apps;
            for (index in _ref1) {
              a_obj = _ref1[index];
              out.sub_nav.push({
                url: a_obj.app,
                nav_label: a_obj.app_label,
                business: a_obj.business,
                env: a_obj.env,
                context: a_obj.context.context
              });
            }
            submenu.submenu += Mustache.render(tpl_sub_nav_ul, out);
          }
          sub_nav += Mustache.render(tpl_sub_nav_container, submenu);
        }
        return html = {
          'main_nav': Mustache.render(tpl_main_nav, main_nav),
          'sub_nav': sub_nav
        };
      },
      compile_menu_collection: function(businesses, tentacles, contexts) {
        var app, apps, bc, business_label, business_name, groups, t_name, t_val, _i, _len;
        bc = {};
        for (business_name in businesses) {
          business_label = businesses[business_name];
          bc[business_name] = {
            label: business_label,
            contexts: null
          };
          apps = [];
          for (t_name in tentacles) {
            t_val = tentacles[t_name];
            if ((t_val.business != null) && t_val.business === business_name) {
              apps.push(t_val);
            }
          }
          groups = {};
          for (_i = 0, _len = apps.length; _i < _len; _i++) {
            app = apps[_i];
            if (!_.has(groups, app.context.context)) {
              groups[app.context.context] = {
                label: contexts[app.context.context].label,
                apps: []
              };
              groups[app.context.context].apps.push(app);
            } else {
              groups[app.context.context].apps.push(app);
            }
          }
          bc[business_name].contexts = groups;
        }
        return bc;
      },
      get_tentacles: function(data) {
        var out, processed_tentacles, re, tentacle, tentacles, _i, _len,
          _this = this;
        data = data.find('tentacleLink');
        re = RegExp(window.ICS360_ENV, "gi");
        tentacles = [];
        _.each(data, function(tentacle, index) {
          var path;
          path = $(tentacle).attr('path');
          if (path !== 'undefined' && path.match(re)) {
            if (path.match(/policies/gi)) {
              return tentacles.push(path);
            }
          }
        });
        processed_tentacles = _.map(tentacles, function(val, key) {
          var app, app_label, business, context, env, pieces, _ref;
          pieces = val.split('-');
          _ref = [pieces[0], pieces[1], pieces[2]], env = _ref[0], business = _ref[1], app = _ref[2];
          if (_.has(_this.app_to_context_map, app)) {
            app_label = _this.app_to_context_map[app].label;
          } else {
            return null;
          }
          context = _this.app_to_context_map[app];
          if ((context != null) && (context.businesses != null)) {
            if (_.isArray(context.businesses)) {
              business = _.pluck(context.businesses, 'name');
            } else if (_.isObject(context.businesses)) {
              business = context.businesses['name'];
            }
          }
          return {
            'env': env,
            'business': business,
            'app': app,
            'app_label': app_label,
            'context': context,
            'tentacle': val
          };
        });
        processed_tentacles = _.filter(processed_tentacles, function(item) {
          return item != null;
        });
        out = {};
        for (_i = 0, _len = processed_tentacles.length; _i < _len; _i++) {
          tentacle = processed_tentacles[_i];
          out[tentacle.app] = tentacle;
        }
        return out;
      },
      build_context_map: function(data) {
        var context_map, contexts,
          _this = this;
        contexts = this.ixconfig.find('ConfigItem[name=contexts]').first().children();
        context_map = {};
        contexts.each(function(index, context) {
          var $context, app_name, applications, item_apps, item_label, node, out;
          $context = $(context);
          item_label = $context.find('ConfigItem[name=label]').attr('value');
          if ($context.find('ConfigItem[name=applications]')) {
            item_apps = $context.find('ConfigItem[name=applications]').children();
          }
          out = context_map[$context.attr('name')] = {};
          if (item_label != null) {
            out.label = item_label;
          }
          applications = {};
          item_apps.each(function(index, app) {
            var $app, app_out;
            $app = $(app);
            return app_out = applications[$app.attr('name')] = app;
          });
          for (app_name in applications) {
            node = applications[app_name];
            applications[app_name] = _this.parse_application(node);
          }
          return out['applications'] = applications;
        });
        return context_map;
      },
      parse_application: function(app) {
        var out,
          _this = this;
        out = {};
        app = $.fn.xml2json(app);
        _.each(app.ConfigItem, function(obj) {
          if (_.has(obj, 'value')) {
            return out[obj['name']] = obj['value'];
          } else if (_.has(obj, 'ConfigItem')) {
            return out[obj['name']] = obj.ConfigItem;
          }
        });
        return out;
      },
      get_context_map: function(contexts) {
        var applications, context, key, out, val, _ref;
        out = {};
        for (context in contexts) {
          applications = contexts[context];
          _ref = applications.applications;
          for (key in _ref) {
            val = _ref[key];
            out[key] = val;
            out[key]['context'] = context;
          }
        }
        return out;
      },
      check_length: function(label) {
        if (label.length > 25) {
          return label.substr(0, 25) + '&hellip;';
        }
        return label;
      }
    };
    return MenuHelper;
  });

}).call(this);

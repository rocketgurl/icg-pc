// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'Store', 'amplify', 'LocalStorageSync', 'CrippledClientSync', 'JSONAuthSync', 'Helpers', 'xmlSync'], function($, _, Backbone, Store, amplify, LocalStorageSync, CrippledClientSync, JSONAuthSync, Helpers, XMLSync) {
    var BaseModel;
    return BaseModel = (function(_super) {

      __extends(BaseModel, _super);

      function BaseModel() {
        return BaseModel.__super__.constructor.apply(this, arguments);
      }

      BaseModel.prototype.Helpers = Helpers;

      BaseModel.prototype.backboneSync = Backbone.sync;

      BaseModel.prototype.backboneAuthSync = JSONAuthSync;

      BaseModel.prototype.backboneParse = Backbone.Model.prototype.parse;

      BaseModel.prototype.crippledClientSync = CrippledClientSync;

      BaseModel.prototype.xmlSync = XMLSync;

      BaseModel.prototype.xmlParse = function(response, xhr) {
        var out, tree, xmlstr;
        if (response != null) {
          tree = response;
          if (_.has(response, 'xml')) {
            xmlstr = response.xml;
          } else {
            xmlstr = (new XMLSerializer()).serializeToString(response);
          }
        }
        tree = $.parseXML(xmlstr);
        out = {
          'xhr': xhr
        };
        if (tree != null) {
          out.document = $(tree);
          out.raw_xml = xhr.responseText;
          out.json = $.fn.xml2json(out.raw_xml);
        }
        return out;
      };

      BaseModel.prototype.response_state = function() {
        var fetch_state, xhr;
        xhr = this.get('xhr');
        fetch_state = {
          text: xhr.getResponseHeader('X-True-Statustext'),
          code: xhr.getResponseHeader('X-True-Statuscode')
        };
        if (!(fetch_state.code != null)) {
          if (xhr.readyState === 4 && xhr.status === 200) {
            fetch_state.code = "200";
          }
        }
        this.set('fetch_state', fetch_state);
        return this;
      };

      BaseModel.prototype.sync = BaseModel.backboneSync;

      BaseModel.prototype.switch_sync = function(sync_adapater) {
        return this.sync = this[sync_adapater];
      };

      BaseModel.prototype.use_xml = function() {
        this.sync = this.xmlSync;
        return this.parse = this.xmlParse;
      };

      BaseModel.prototype.use_cripple = function() {
        this.sync = this.crippledClientSync;
        return this.parse = this.xmlParse;
      };

      BaseModel.prototype.use_localStorage = function(storage_key, expire) {
        var options;
        options = expire != null ? {
          expires: expire
        } : null;
        this.localStorage = new Store(storage_key, options);
        this.localSync = LocalStorageSync;
        this.sync = this.localSync;
        return this.parse = this.backboneParse;
      };

      BaseModel.prototype.use_backbone = function() {
        this.sync = this.backboneSync;
        return this.parse = this.backboneParse;
      };

      BaseModel.prototype.use_backbone_auth = function() {
        this.sync = this.backboneAuthSync;
        return this.parse = this.backboneParse;
      };

      BaseModel.prototype.Amplify = amplify;

      BaseModel.prototype.logger = function(msg) {
        return this.Amplify.publish('log', msg);
      };

      BaseModel.prototype.flash = function(type, msg) {
        return this.Amplify.publish('flash', type, msg);
      };

      return BaseModel;

    })(Backbone.Model);
  });

}).call(this);
